# To get started with security, check out the documentation:
# http://symfony.com/doc/current/book/security.html
security:

    encoders:
        Symfony\Component\Security\Core\User\User: plaintext
        FOS\UserBundle\Model\UserInterface: sha512

    role_hierarchy:
        ROLE_CUSTOMER: ROLE_USER
        ROLE_COURIER: ROLE_CUSTOMER
        ROLE_RESTAURANT: ROLE_USER
        ROLE_STORE: ROLE_USER
        ROLE_ADMIN: ROLE_COURIER

    # http://symfony.com/doc/current/book/security.html#where-do-users-come-from-user-providers
    providers:
        fos_userbundle:
            id: fos_user.user_provider.username_email
        # jwt:
        #     lexik_jwt:
        #         class: AppBundle\Entity\ApiUser

    firewalls:
        # disables authentication for assets and the profiler, adapt it according to your needs
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        api_login:
            pattern:  ^/api/login
            stateless: true
            anonymous: ~
            form_login:
                check_path:               /api/login_check
                success_handler:          lexik_jwt_authentication.handler.authentication_success
                failure_handler:          lexik_jwt_authentication.handler.authentication_failure
                require_previous_session: false

        api_deliveries_create:
            pattern:   ^/api/deliveries
            methods: [ POST ]
            stateless: true
            anonymous: ~
            guard:
                authenticators:
                    - AppBundle\Security\StoreTokenAuthenticator

        api_pricing_calculate_price:
            pattern:   ^/api/pricing/calculate-price
            stateless: true
            anonymous: ~
            guard:
                authenticators:
                    - AppBundle\Security\StoreTokenAuthenticator

        token_refresh:
            pattern:  ^/api/token/refresh
            stateless: true
            anonymous: ~

        api_docs:
            pattern:   ^/api/docs
            security: false

        api_root:
            pattern:   ^/api$
            security: false

        api:
            pattern:   ^/api
            stateless: true
            anonymous: ~
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator
            remember_me:
                secret: '%secret%'

        web:
            pattern:            ^/
            form_login:
                provider:       fos_userbundle
                success_handler: coopcycle.web_success_handler
            logout: true
            anonymous: ~

        main:
            anonymous: ~

    access_control:
        - { path: ^/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/register, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/resetting, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/order/public, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/order, roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/profile/restaurants, roles: ROLE_RESTAURANT }
        - { path: ^/profile, roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/_uploader/restaurant, roles: [ ROLE_ADMIN, ROLE_RESTAURANT ] }
        - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/register, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/routing, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/settings, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/token/refresh, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/restaurants, roles: IS_AUTHENTICATED_ANONYMOUSLY, methods: [ GET ] }
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }
